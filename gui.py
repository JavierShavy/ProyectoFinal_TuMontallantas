import tkinter as tk
from tkinter import ttk, messagebox, Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel
from PIL import Image, ImageTk
import requests
from io import BytesIO
#from functools import partial
from googlemaps import Client
from pathlib import Path

class TuMontallantasApp:
    def __init__(self, root):
        ##INTERFAZ GRÁFICA
        # This file was generated by the Tkinter Designer by Parth Jadhav
        # https://github.com/ParthJadhav/Tkinter-Designer
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"build/assets/frame0")

        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        
        self.root = root
        self.root.title("TuMontallantas")
        self.root.configure(bg = "#D9D9D9")
        self.root.geometry("400x300+500+500") #Dimensiones de la ventana y posicion

        # Configuración de la ventana principal
        self.frame = ttk.Frame(root, padding="5")
        self.frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.canvas = Canvas(
            root,
            bg = "#FFFFFF",
            height = 300,
            width = 400,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        self.canvas.place(x = 0, y = 0)

        self.button_image_1 = PhotoImage(file=relative_to_assets("btnBuscar.png"))
        self.btnBuscar = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.cargar_form_mapa,
            relief="flat"
        )
        self.btnBuscar.place(
            x=20.0,
            y=240.0,
            width=360.0,
            height=55.0
        )
        self.entry_image_1 = PhotoImage(file=relative_to_assets("txtUbicacion.png"))
        self.entry_bg_1 = self.canvas.create_image(
            200.0,
            195.0,
            image=self.entry_image_1
        )
        self.txtDatosUbicacion = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
        self.txtDatosUbicacion.place(
            x=30.0,
            y=170.0,
            width=340.0,
            height=25.0
        )
        #txtDatosUbicacion.configure(state = "readonly")
        self.canvas.create_text(
            20.0,
            150.0,
            anchor="nw",
            text="Datos encontrados:",
            fill="#000000",
            font=("Inter", 12 * -1)
        )
        self.entry_image_2 = PhotoImage(file=relative_to_assets("txtUbicacion.png"))
        self.entry_bg_2 = self.canvas.create_image(
            200.0,
            115.0,
            image=self.entry_image_2
        )
        self.txtUbicacion = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
        self.txtUbicacion.place(
            x=30.0,
            y=90.0,
            width=340.0,
            height=25.0
        )
        self.canvas.create_text(
            20.0,
            70.0,
            anchor="nw",
            text="Escribe la ubicación:",
            fill="#000000",
            font=("Inter", 12 * -1)
        )
        self.canvas.create_rectangle(
            0.0,
            0.0,
            400.0,
            50.0,
            fill="#D9D9D9",
            outline="")
        self.canvas.create_text(
            20.0,
            13.0,
            anchor="nw",
            text="BIENVENIDO A TUMONTALLANTAS",
            fill="#444444",
            font=("Inter Bold", 18 * -1)
        )
        self.image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            375.0,
            27.0,
            image=self.image_image_1
        )
    ########################################################################
    def load_map(self):
        address = self.txtUbicacion.get()
        if address:
            try:
                # Geocodificar la dirección para obtener las coordenadas
                api_key = "AIzaSyAbVmvbaybEIY5sgk47ICFU-P9ODjZz5NY"
                geocode_url = f"https://maps.googleapis.com/maps/api/geocode/json?address=San%20Juan%20de%20Pasto%20{address}&key={api_key}"
                geocode_response = requests.get(geocode_url)
                geocode_data = geocode_response.json()
                print(geocode_url)

                if geocode_data['status'] == 'OK':
                    location = geocode_data['results'][0]['geometry']['location']
                    self.txtDatosUbicacion.delete(0, tk.END)
                    self.txtDatosUbicacion.insert(0, geocode_data['results'][0]['formatted_address'])
                    
                    for result in geocode_data['results']:
                        print (result['formatted_address'] + " - Latitud: " + str(result['geometry']['location']['lat']))
                        print (result['formatted_address'] + " - Longitud: " + str(result['geometry']['location']['lng']))

                    lat = location['lat']
                    lng = location['lng']

                    # Construir la URL de la API de Google Maps para obtener el mapa
                    map_url = f"https://maps.googleapis.com/maps/api/staticmap?center={lat},{lng}&zoom=18&size=640x640&maptype=hybrid&key={api_key}"
                    # Hacer la solicitud a la API
                    map_response = requests.get(map_url)
                    map_response.raise_for_status()

                    # Cargar la imagen del mapa en el canvas
                    image_data = map_response.content
                    image = Image.open(BytesIO(image_data))
                    self.map_image = ImageTk.PhotoImage(image)
                    self.canvas.create_image(0, 0, anchor=tk.NW, image=self.map_image)
                    #print(map_url)
                else:
                    print(f"Error en la geocodificación: {geocode_data['status']}")
            except requests.exceptions.RequestException as e:
                print(f"Error al cargar el mapa: {e}")
    ################################################################
    def cargar_form_mapa(self):
        # Crear una nueva ventana para mostrar todos los clientes
        new_window = Toplevel(self.root)
        new_window.title("Mapa encontrado")
        new_window.geometry("640x640")
        # Agregar un canvas para mostrar el mapa
        self.canvas = tk.Canvas(new_window, width=640, height=640)
        self.canvas.grid(row=0, column=0, columnspan=2)
        self.canvas.configure(bg = "#D9D9D9")

        self.map_image = None
        self.load_map()